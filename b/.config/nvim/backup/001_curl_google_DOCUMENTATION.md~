
\footnotesize

\today
	
 PURPOSE:		Focus is Google API, youtube in particular. This is summary of
 using cURL to obtain authorization_code, followed by and then proceed querying youtube.

 USAGE:	This is a markdown, md, file.   All zsh code is treated as verbatim.
 To run the zsh, use the neovim terminal and then the short cut ,tl.

 Once something is working convert to a zsh script file.
 But THIS document be NEAT summary.


  *  Source:  https://developers.google.com/youtube/v3/guides/auth/installed-apps
  *  ~/.Renviron for secrets
  *  zsh, `&' is special.  Use single quotes around it to avoid errors.
  *  scope is char[1] in R; multiple scopes are separated by whitespace

REF:  https://stackoverflow.com/questions/53357741/how-to-perform-oauth-2-0-using-the-curl-cli#53357742et CLIENT_ID=Replace_with_your_Client_ID

#### #1  Youtube constants
```
auth_url=https://accounts.google.com/o/oauth2/v2/auth
token_url=https://oauth2.googleapis.com/token 
base_url=https://www.googleapis.com/youtube/v3
redirect_uri=		http://127.0.0.1: port (no restrictions)
								urn:ieff.wg.oauth:2.0:oob  (not secure, but OK) Method used
								here.
								urn:ieff.wg.oauth:2.0:oob:auto (deprecated)
							
redirect_uri=urn:ieff.wg.oauth:2.0:oob 
# Per google docs, scopes are separated by whitespace
scope='https://www.googleapis.com/auth/youtube https://www.googleapis.com/auth/youtube.force-ssl'	

Project 2 (in Google dashboard)
client_id=$(Rscript -e "cat(Sys.getenv('OAUTH2_ID'))")
client_secret=$(Rscript -e "cat(Sys.getenv('OAUTH2_SECRET'))")


```

####	#2  Obtain auth code:  Run this in neovim termina, copy+paste into browser, which asks user
permission and then returns auth.code !
```
Google's example, with loop for uri_redirect
https://accounts.google.com/o/oauth2/v2/auth?
 scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube.readonly&
 response_type=code&
 state=security_token%3D138r5719ru3e1%26url%3Dhttps%3A%2F%2Foauth2.example.com%2Ftoken&
 redirect_uri=http%3A//127.0.0.1%3A9004&
 client_id=client_id
```
```
echo \
'https://accounts.google.com/o/oauth2/v2/auth?'\
'client_id='$client_id'&redirect_uri=urn:ietf:wg:oauth:2.0:oob'\
'&scope='$scope'&response_type=code'
```

####	#3  Exchange auth code for refresh and access tokens.
```
auth_code=4/1AX4XfWjRp5CdGo1k7pUcFjiesqfVkng--wmxhMKO9kuJBhCXDXA9RSv9Ajc
echo $auth_code
## Ex From Youtube (note:  oob:auto is now deprecated)
POST /token HTTP/1.1
Host: oauth2.googleapis.com
Content-Type: application/x-www-form-urlencoded

code=<auth code>&
client_id=your_client_id&
client_secret=your_client_secret&
redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob%3Aauto&
grant_type=authorization_code
```


#### Curl:		"error": "invalid_request"
```
echo \
curl -s X POST \
--data "client_id=$client_id" \
--data "client_secret=$client_secret" \
--data "code=$auth_code" \
--data "redirect_uri=$redirect_uri" \
--data "grant_type=authorization_code" \
--header 'Accept: application/json' \
"$token_url"
```


(1APR2022)


### Request:  appropriate query sent to:
PURPOSE:    HTTR2::  Given ONE video,  return ALL Comments 
Authorization: Bearer [YOUR_ACCESS_TOKEN]
Accept: application/json

GET https://www.googleapis.com/youtube/v3/commentThreads 


### From Explorer
```
GET https://youtube.googleapis.com/youtube/v3/playlists?part=snippet%2CcontentDetails&maxResults=5&mine=true&key=[YOUR_API_KEY] HTTP/1.1

Authorization: Bearer [YOUR_ACCESS_TOKEN]
Accept: application/json
```

###
```
same, but as Curl
    
curl \
  'https://youtube.googleapis.com/youtube/v3/playlists?part=snippet%2CcontentDetails&maxResults=5&mine=true&key=[YOUR_API_KEY]' \
  --header 'Authorization: Bearer [YOUR_ACCESS_TOKEN]' \
  --header 'Accept: application/json' \
  --compressed
```




###   From Google Playground
```
   https://youtube.googleapis.com/youtube/v3/commentThreads?\
		videoId=Mec9sw1cJk8&part=snippet,replies
```

#### 1) Select youtube API, scopes, approve: 
Request/Response (jr added the end of line \)
```  
HTTP/1.1 302 Found
Location: https://accounts.google.com/o/oauth2/v2/auth?\
redirect_uri=https%3A%2F%2Fdevelopers.google.com%2Foauthplayground&\
prompt=consent&response_type=code&client_id=407408718192.apps.googleusercontent.com&\
scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube.force-ssl&\
access_type=offline

GET /oauthplayground/?\
code=4/0AX4XfWi2A3xFqlfSW0XHewqsVK9nDnCqHg5b5XERiM40gKgug8EaeAq0fiM6wfZ1FPSQJg&\
scope=https://www.googleapis.com/auth/youtube.force-ssl%20https://www.googleapis.com/auth/youtube HTTP/1.1
Host: developers.google.com

```


#### 2) press button for refresh tokens
```

POST /token HTTP/1.1
Host: oauth2.googleapis.com
Content-length: 261
content-type: application/x-www-form-urlencoded
user-agent: google-oauth-playground

code=4%2F0AX4XfWi2A3xFqlfSW0XHewqsVK9nDnCqHg5b5XERiM40gKgug8EaeAq0fiM6wfZ1FPSQJg&\
redirect_uri=https%3A%2F%2Fdevelopers.google.com%2Foauthplayground&\
client_id=407408718192.apps.googleusercontent.com&\
client_secret=************&\
scope=&\
grant_type=authorization_code

HTTP/1.1 200 OK
Content-length: 465
X-xss-protection: 0
X-content-type-options: nosniff
Transfer-encoding: chunked
Expires: Mon, 01 Jan 1990 00:00:00 GMT
Vary: Origin, X-Origin, Referer
Server: scaffolding on HTTPServer2
-content-encoding: gzip
Pragma: no-cache
Cache-control: no-cache, no-store, max-age=0, must-revalidate
Date: Mon, 04 Apr 2022 21:12:06 GMT
X-frame-options: SAMEORIGIN
Alt-svc: h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443";\
ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
Content-type: application/json; charset=utf-8

{
  "access_token": <SNIP>, 
  "scope": "https://www.googleapis.com/auth/youtube.force-ssl https://www.googleapis.com/auth/youtube", 
  "token_type": "Bearer", 
  "expires_in": 3599, 
  "refresh_token": "<SNIP"
}

```

#### 3) Finally, query youtube:
```

GET /youtube/v3/playlists?mine=true HTTP/1.1
Host: youtube.googleapis.com
Content-length: 0
Authorization: Bearer <SNIP> HTTP/1.1 200 OK
Content-length: 907
X-xss-protection: 0
Content-location: https://youtube.googleapis.com/youtube/v3/playlists?mine=true
X-content-type-options: nosniff
Transfer-encoding: chunked
Vary: Origin, X-Origin, Referer
Server: scaffolding on HTTPServer2
-content-encoding: gzip
Cache-control: private
Date: Mon, 04 Apr 2022 21:16:16 GMT
X-frame-options: SAMEORIGIN
Alt-svc: h3=":443"; ma=2592000,h3-29=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
Content-type: application/json; charset=UTF-8

{
  "nextPageToken": "CAUQAA", 
  "items": [
    {
      "kind": "youtube#playlist", 
      "etag": "qAfhdSn2Hfhco76WxoxiNl4OXb0", 
      "id": "PLbcglKxZP5PMx8LvevXwZyjyCehQQZYxJ"
    }, 
    {
      "kind": "youtube#playlist", 
      "etag": "7b2QfEsoDqnlK2Yvt5sRhWiWhWo", 
      "id": "PLbcglKxZP5PN4iZfUp-Re8Q0GLoD_g_CT"
    }, 
		====
		<SNIP>
		====
  ], 
  "kind": "youtube#playlistListResponse", 
  "etag": "bKbDlR2GIByAMM0Tcwb3m7xYlXM", 
  "pageInfo": {
    "resultsPerPage": 5, 
    "totalResults": 144
  }
}

```
####  Technical Notes
  *  libuv, C lib, loops, driven by events, responses async, non-blocking
		 (cont
	*  Selenium, java server, useful to automate browser (push buttons) ?
